name: CI/CD Pipeline

permissions:
  contents: read
  packages: write

"on":
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to build images for"
        required: false
        default: ""
  schedule:
    - cron: "0 5 * * 1" # Mondays 05:00 UTC for security audit

concurrency:
  group: cicd-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Step 1: Run tests for all services
  test:
    runs-on: skoda-runner-set
    strategy:
      max-parallel: 5
      matrix:
        service:
          - skodachargecollector
          - skodachargefinder
          - skodachargefrontend
          - skodaupdatechargeprices
          - skodaimporter
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.13"

      - name: Show Python version
        run: python -V

      - name: Configure PyPI proxy
        run: |
          mkdir -p ~/.config/pip
          echo "[global]" > ~/.config/pip/pip.conf
          echo "index-url = http://pypi.lan:8080/simple/" >> ~/.config/pip/pip.conf
          echo "trusted-host = pypi.lan" >> ~/.config/pip/pip.conf

      - name: Upgrade pip securely via proxy
        run: |
          python -m pip install --upgrade pip

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles(format('{0}/requirements.txt', matrix.service)) }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install pip-audit
        run: pip install pip-audit

      - name: Run pip-audit
        working-directory: ${{ matrix.service }}
        run: |
          if [ -f requirements.txt ]; then
            pip-audit -r requirements.txt --desc --format=json --output=audit-results.json || true
            pip-audit -r requirements.txt --desc
          else
            echo "No requirements.txt found in ${{ matrix.service }}, skipping audit"
          fi

      - name: Upload audit results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: audit-results-${{ matrix.service }}
          path: ${{ matrix.service }}/audit-results.json
          if-no-files-found: ignore

      - name: Install dependencies (only when tests exist)
        working-directory: ${{ matrix.service }}
        run: |
          if [ -d tests ]; then \
            if [ -f requirements.txt ]; then pip install -r requirements.txt; fi; \
          else \
            echo "No tests in ${{ matrix.service }}, skipping dependency install"; \
          fi

      - name: Install pytest (if tests exist)
        working-directory: ${{ matrix.service }}
        run: |
          if [ -d tests ]; then pip install pytest pytest-cov pytest-asyncio; fi

      - name: Run tests (if tests exist)
        working-directory: ${{ matrix.service }}
        run: |
          if [ -d tests ]; then pytest -q; else echo "No tests in ${{ matrix.service }}, skipping"; fi

  # Step 3a: Build test images (for non-main branches and PRs)
  build-test-images:
    if: github.ref != 'refs/heads/main'
    needs: [test]
    runs-on: skoda-runner-set
    timeout-minutes: 90
    strategy:
      max-parallel: 5
      matrix:
        include:
          - image: ghcr.io/tn8or/skodaimporter
            context-path: ./skodaimporter
          - image: ghcr.io/tn8or/skodachargefinder
            context-path: ./skodachargefinder
          - image: ghcr.io/tn8or/skodachargecollector
            context-path: ./skodachargecollector
          - image: ghcr.io/tn8or/skodaupdatechargeprices
            context-path: ./skodaupdatechargeprices
          - image: ghcr.io/tn8or/skodachargefrontend
            context-path: ./skodachargefrontend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          ref: main
          fetch-depth: 0
          fetch-tags: true

      - name: Log in to Docker Hub
        continue-on-error: true
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker with registry proxy
        run: |
          if ! command -v docker &> /dev/null; then
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo usermod -aG docker $USER
          fi

          sudo mkdir -p /etc/docker
          sudo cp .github/docker-daemon.json /etc/docker/daemon.json

          if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ] && [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            echo "Configuring Docker Hub authentication..."
            mkdir -p ~/.docker
            echo '{"auths":{"https://index.docker.io/v1/":{"username":"${{ secrets.DOCKERHUB_USERNAME }}","password":"${{ secrets.DOCKERHUB_TOKEN }}"}}}' > ~/.docker/config.json
          fi

          echo "Docker daemon configuration updated with registry proxy settings"
          docker info

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64
          driver-opts: |
            env.BUILDKIT_STEP_LOG_MAX_SIZE=50000000

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ matrix.image }}
          tags: |
            type=raw,value=test
            type=ref,event=branch,suffix=-test
            type=sha,suffix=-test

      - name: Compute build args (commit, tag, date)
        id: buildargs
        shell: bash
        run: |
          echo "git_commit=${{ github.sha }}" >> $GITHUB_OUTPUT
          TAG=$(git describe --tags --always --dirty || echo)
          echo "git_tag=${TAG}" >> $GITHUB_OUTPUT
          echo "build_date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      - name: Build and push Docker test image
        if: github.actor != 'dependabot[bot]'
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64, linux/arm64
          context: ${{ matrix.context-path }}
          file: ${{ matrix.context-path }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            GIT_COMMIT=${{ steps.buildargs.outputs.git_commit }}
            GIT_TAG=${{ steps.buildargs.outputs.git_tag }}
            BUILD_DATE=${{ steps.buildargs.outputs.build_date }}
          cache-from: |
            type=gha
          cache-to: |
            type=gha,mode=max

  # Step 3b: Build production images (for main branch only)
  build-production-images:
    if: github.ref == 'refs/heads/main'
    needs: [test]
    runs-on: skoda-runner-set
    timeout-minutes: 90
    strategy:
      max-parallel: 5
      matrix:
        include:
          - image: ghcr.io/tn8or/skodaimporter
            context-path: ./skodaimporter
          - image: ghcr.io/tn8or/skodachargefinder
            context-path: ./skodachargefinder
          - image: ghcr.io/tn8or/skodachargecollector
            context-path: ./skodachargecollector
          - image: ghcr.io/tn8or/skodaupdatechargeprices
            context-path: ./skodaupdatechargeprices
          - image: ghcr.io/tn8or/skodachargefrontend
            context-path: ./skodachargefrontend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Log in to Docker Hub
        continue-on-error: true
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker with registry proxy
        run: |
          if ! command -v docker &> /dev/null; then
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo usermod -aG docker $USER
          fi

          sudo mkdir -p /etc/docker
          sudo cp .github/docker-daemon.json /etc/docker/daemon.json

          if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ] && [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            echo "Configuring Docker Hub authentication..."
            mkdir -p ~/.docker
            echo '{"auths":{"https://index.docker.io/v1/":{"username":"${{ secrets.DOCKERHUB_USERNAME }}","password":"${{ secrets.DOCKERHUB_TOKEN }}"}}}' > ~/.docker/config.json
          fi

          echo "Docker daemon configuration updated with registry proxy settings"
          docker info

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64
          driver-opts: |
            env.BUILDKIT_STEP_LOG_MAX_SIZE=50000000

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ matrix.image }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Compute build args (commit, tag, date)
        id: buildargs
        shell: bash
        run: |
          echo "git_commit=${{ github.sha }}" >> $GITHUB_OUTPUT
          TAG=$(git describe --tags --always --dirty || echo)
          echo "git_tag=${TAG}" >> $GITHUB_OUTPUT
          echo "build_date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      - name: Build and push Docker production image
        if: github.actor != 'dependabot[bot]'
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64, linux/arm64
          context: ${{ matrix.context-path }}
          file: ${{ matrix.context-path }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            GIT_COMMIT=${{ steps.buildargs.outputs.git_commit }}
            GIT_TAG=${{ steps.buildargs.outputs.git_tag }}
            BUILD_DATE=${{ steps.buildargs.outputs.build_date }}
          cache-from: |
            type=gha
          cache-to: |
            type=gha,mode=max

  # Step 4a: Notify test webhook (after test builds)
  notify-test-webhook:
    if: github.ref != 'refs/heads/main'
    needs: build-test-images
    runs-on: skoda-runner-set
    timeout-minutes: 5
    steps:
      - name: Invoke test deployment hook
        if: github.actor != 'dependabot[bot]'
        uses: distributhor/workflow-webhook@v3
        with:
          webhook_url: ${{ secrets.TEST_WEBHOOK }}
          webhook_auth_type: none
          verbose: true

  # Step 4b: Notify production webhook (after production builds)
  notify-production-webhook:
    if: github.ref == 'refs/heads/main'
    needs: build-production-images
    runs-on: skoda-runner-set
    timeout-minutes: 5
    steps:
      - name: Invoke production deployment hook
        if: github.actor != 'dependabot[bot]'
        uses: distributhor/workflow-webhook@v3
        with:
          webhook_url: ${{ secrets.WEBHOOK }}
          webhook_auth_type: none
          verbose: true
