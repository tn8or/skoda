name: Create and publish test Docker images

# This workflow runs third in the sequence: CI → pip-audit → image workflows (parallel with ghcr-image)
# Note: Removed direct pull_request trigger to ensure sequential execution
"on":
  workflow_run:
    workflows: ["pip-audit"]
    types: [completed]
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build test images for'
        required: false
        default: ''

jobs:
  build-and-push-test-image:
    # Build test images for PRs and non-main branch pushes, or for manual triggers
    if: ${{ (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' && (github.event.workflow_run.event == 'pull_request' || github.event.workflow_run.head_branch != 'main')) || github.event_name == 'workflow_dispatch' }}
    runs-on: skoda-runner-set
    timeout-minutes: 90  # Docker builds take 60-90 minutes according to docs
    permissions:
      contents: read
      packages: write
    strategy:
      # Limit concurrent builds for better batching
      max-parallel: 3
      matrix:
        include:
          - image: ghcr.io/tn8or/skodaimporter
            context-path: ./skodaimporter
          - image: ghcr.io/tn8or/skodachargefinder
            context-path: ./skodachargefinder
          - image: ghcr.io/tn8or/skodachargecollector
            context-path: ./skodachargecollector
          - image: ghcr.io/tn8or/skodaupdatechargeprices
            context-path: ./skodaupdatechargeprices
          - image: ghcr.io/tn8or/skodachargefrontend
            context-path: ./skodachargefrontend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          # Security: Always checkout main branch, not potentially untrusted PR code
          # This ensures we build from trusted source even for test builds
          ref: main
          fetch-depth: 0
          fetch-tags: true

      - name: Log in to Docker Hub (before Docker operations)
        continue-on-error: true
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker with registry proxy
        run: |
          # Install Docker if not available (shouldn't be needed on skoda-runner-set)
          if ! command -v docker &> /dev/null; then
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo usermod -aG docker $USER
          fi

          # Configure Docker daemon with registry proxy
          sudo mkdir -p /etc/docker
          sudo cp .github/docker-daemon.json /etc/docker/daemon.json

          # Add Docker Hub authentication to daemon config if credentials are available
          if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ] && [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            echo "Configuring Docker Hub authentication..."
            mkdir -p ~/.docker
            echo '{"auths":{"https://index.docker.io/v1/":{"username":"${{ secrets.DOCKERHUB_USERNAME }}","password":"${{ secrets.DOCKERHUB_TOKEN }}"}}}' > ~/.docker/config.json
          fi

          # Configure Docker daemon with registry proxy for future operations
          # Note: Configuration will be applied to new containers and builds
          echo "Docker daemon configuration updated with registry proxy settings"

          # Verify Docker is running and show registry mirrors
          docker info

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64
          driver-opts: |
            env.BUILDKIT_STEP_LOG_MAX_SIZE=50000000

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ matrix.image }}
          tags: |
            type=raw,value=test
            type=ref,event=branch,suffix=-test
            type=sha,suffix=-test

      - name: Compute build args (commit, tag, date)
        id: buildargs
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            echo "GIT_COMMIT=${{ github.event.workflow_run.head_sha }}" >> $GITHUB_ENV
          else
            echo "GIT_COMMIT=${{ github.sha }}" >> $GITHUB_ENV
          fi
          # Best-effort tag description; falls back to short SHA
          TAG=$(git describe --tags --always --dirty || echo)
          echo "GIT_TAG=${TAG}" >> $GITHUB_ENV
          echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV

      - name: Build and push Docker test image
        if: github.actor != 'dependabot[bot]'
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64
          context: ${{ matrix.context-path }}
          file: ${{ matrix.context-path }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            GIT_COMMIT=${{ env.GIT_COMMIT }}
            GIT_TAG=${{ env.GIT_TAG }}
            BUILD_DATE=${{ env.BUILD_DATE }}
          #cache-from: |
          #  type=gha
          #cache-to: |
          #  type=gha,mode=max

  notify-test-webhook:
    if: ${{ (github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.event == 'push' && github.event.workflow_run.head_branch != 'main') || github.event_name == 'pull_request' }}
    runs-on: skoda-runner-set
    timeout-minutes: 5  # Webhook calls should be quick
    permissions: {}
    needs: build-and-push-test-image
    steps:
      - name: Invoke test deployment hook
        if: github.actor != 'dependabot[bot]'
        uses: distributhor/workflow-webhook@v3
        with:
          webhook_url: ${{ secrets.TEST_WEBHOOK }}
          webhook_auth_type: none
          verbose: true
